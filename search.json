[{"path":"https://kuuuwe.github.io/trustmebro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 trustmebro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/articles/get_data_matchready.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Get Data Matchready","text":"key data set trustmebro::sailor_keys longitudinal data set long format. tibble 20 rows 12 columns. data linked survey data trustmebro::sailor_students, tibble 12 rows 6 columns. Let us take quick look survey data:","code":"print(trustmebro::sailor_students) #> # A tibble: 12 × 6 #>    sgic             school class   gender  testscore_langauge testscore_calculus #>    <chr>            <chr>  <chr>   <chr>                <dbl>              <dbl> #>  1 \"MUC__0308\"      54321  \"3-B \"  \"Male\"                 425                394 #>  2 \"HÄT 2701\"       22345  \"2-A\"   \"???\"                 4596                123 #>  3 \"MUK3801\"        22345  \"  2-B\" \"Femal…               2456               9485 #>  4 \"SAM10\"          22345  \"3-B\"   \"Femal…               2345                  3 #>  5 \"T0601\"          65432  \"1-C\"   \"Femal…               1234                 NA #>  6 \"      UIT3006 \" 12345  \"3-3\"    NA                    123                394 #>  7 \"@@@@@@\"         NA     \"3_2  \" \"Femal…                 56               2938 #>  8  NA              12345  \"3@41\"  \"   Fe…                986               3948 #>  9 \" \"              unkown  NA     \"Femal…                284                205 #> 10 \"MOA2210\"        12345  \" \"     \"Femal…                105                 21 #> 11 \"MUK3801\"        22345  \"2-B\"   \"Femal…               9586                934 #> 12 \"T0601\"          65432  \"1-C\"   \"Femal…                 NA                764"},{"path":"https://kuuuwe.github.io/trustmebro/articles/get_data_matchready.html","id":"replace-non-alphanumeric-characters-you-dont-want-to-deal-with","dir":"Articles","previous_headings":"","what":"Replace non-alphanumeric characters you don’t want to deal with","title":"Get Data Matchready","text":"Yep, data needs cleaning. ’s lot unnecessary stuff, like whitespace. see time survey data strings. can replace non-alphanumeric characters string-variables data set trustmebro::sailor_students using trustmebro::purge_string: Please note since deal data collected Germany, umlauts remain unchanged .","code":"purge_string(sailor_students, replacement = \"#\") #> # A tibble: 12 × 6 #>    sgic      school class gender testscore_langauge testscore_calculus #>    <chr>     <chr>  <chr> <chr>               <dbl>              <dbl> #>  1 MUC##0308 54321  3#B   MALE                  425                394 #>  2 H#T2701   22345  2#A   ###                  4596                123 #>  3 MUK3801   22345  2#B   FEMALE               2456               9485 #>  4 SAM10     22345  3#B   FEMALE               2345                  3 #>  5 T0601     65432  1#C   FEMALE               1234                 NA #>  6 UIT3006   12345  3#3   #                     123                394 #>  7 ######    #      3#2   FEMALE                 56               2938 #>  8 #         12345  3#41  FEMALE                986               3948 #>  9 #         UNKOWN #     FEMALE                284                205 #> 10 MOA2210   12345  #     FEMALE                105                 21 #> 11 MUK3801   22345  2#B   FEMALE               9586                934 #> 12 T0601     65432  1#C   FEMALE                 NA                764"},{"path":"https://kuuuwe.github.io/trustmebro/articles/get_data_matchready.html","id":"recode-variables","dir":"Articles","previous_headings":"","what":"Recode variables","title":"Get Data Matchready","text":"variables need recoding analysis. , can provide recode map: recode_map named vector names represent categories (case, “Male” “Female”), values (“M” “F”) corresponding codes used categories. used map full category labels shorter, standardized values. can pass trustmebro::recode_valinvec, recode values accordingly. new variable added contains recoded values","code":"recode_map <- c(MALE = \"M\", FEMALE = \"F\") recode_valinvec(purge_string(sailor_students, replacement = \"#\"), gender, recode_map, gender_recode) #> # A tibble: 12 × 7 #>    sgic  school class gender testscore_langauge testscore_calculus gender_recode #>    <chr> <chr>  <chr> <chr>               <dbl>              <dbl> <chr>         #>  1 MUC#… 54321  3#B   MALE                  425                394 M             #>  2 H#T2… 22345  2#A   ###                  4596                123 ###           #>  3 MUK3… 22345  2#B   FEMALE               2456               9485 F             #>  4 SAM10 22345  3#B   FEMALE               2345                  3 F             #>  5 T0601 65432  1#C   FEMALE               1234                 NA F             #>  6 UIT3… 12345  3#3   #                     123                394 #             #>  7 ####… #      3#2   FEMALE                 56               2938 F             #>  8 #     12345  3#41  FEMALE                986               3948 F             #>  9 #     UNKOWN #     FEMALE                284                205 F             #> 10 MOA2… 12345  #     FEMALE                105                 21 F             #> 11 MUK3… 22345  2#B   FEMALE               9586                934 F             #> 12 T0601 65432  1#C   FEMALE                 NA                764 F"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"data-sailor_students","dir":"Articles","previous_headings":"","what":"Data: sailor_students","title":"Inspect SGICs","text":"survey data use trustmebro::sailor_students dataset. contains fictional student assessment data students sailor moon universe.","code":"sailor_students #> # A tibble: 12 × 6 #>    sgic             school class   gender  testscore_langauge testscore_calculus #>    <chr>            <chr>  <chr>   <chr>                <dbl>              <dbl> #>  1 \"MUC__0308\"      54321  \"3-B \"  \"Male\"                 425                394 #>  2 \"HÄT 2701\"       22345  \"2-A\"   \"???\"                 4596                123 #>  3 \"MUK3801\"        22345  \"  2-B\" \"Femal…               2456               9485 #>  4 \"SAM10\"          22345  \"3-B\"   \"Femal…               2345                  3 #>  5 \"T0601\"          65432  \"1-C\"   \"Femal…               1234                 NA #>  6 \"      UIT3006 \" 12345  \"3-3\"    NA                    123                394 #>  7 \"@@@@@@\"         NA     \"3_2  \" \"Femal…                 56               2938 #>  8  NA              12345  \"3@41\"  \"   Fe…                986               3948 #>  9 \" \"              unkown  NA     \"Femal…                284                205 #> 10 \"MOA2210\"        12345  \" \"     \"Femal…                105                 21 #> 11 \"MUK3801\"        22345  \"2-B\"   \"Femal…               9586                934 #> 12 \"T0601\"          65432  \"1-C\"   \"Femal…                 NA                764"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"sgic-plausibility","dir":"Articles","previous_headings":"","what":"SGIC Plausibility","title":"Inspect SGICs","text":"variable sgic stores SGICs created students. SGIC seven-character string created according following instructions: Characters 1-3 (letters): First letter given name (1st character) Last letter given name (2nd character) First letter family name (3rd character) Characters 4-7 (digits): Birthday (4th 5th character) Month birth (6th 7th character)","code":""},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"check-character-ids","dir":"Articles","previous_headings":"SGIC Plausibility","what":"Check Character IDs","title":"Inspect SGICs","text":"can use trustmebro::inspect_characterid check provided SGICs adhere expected pattern three letters followed four digits. expected structure can defined using regular expression \"^[-Za-z]{3}[0-9]{4}$\", can pass function using pattern = argument. seamless integration data workflow, function can conveniently combined dplyr::mutate: created trustmebro::inspect_characterid SGICs mind, course, non-SGIC strings can also checked using specified regular expression.","code":"sailor_students %>%    mutate(structure_check =             inspect_characterid(              sgic, pattern = \"^[A-Za-z]{3}[0-9]{4}$\")) %>%   select(sgic, structure_check) #> # A tibble: 12 × 2 #>    sgic             structure_check #>    <chr>            <lgl>           #>  1 \"MUC__0308\"      FALSE           #>  2 \"HÄT 2701\"       FALSE           #>  3 \"MUK3801\"        TRUE            #>  4 \"SAM10\"          FALSE           #>  5 \"T0601\"          FALSE           #>  6 \"      UIT3006 \" FALSE           #>  7 \"@@@@@@\"         FALSE           #>  8  NA              FALSE           #>  9 \" \"              FALSE           #> 10 \"MOA2210\"        TRUE            #> 11 \"MUK3801\"        TRUE            #> 12 \"T0601\"          FALSE"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"check-birthdate-components","dir":"Articles","previous_headings":"SGIC Plausibility","what":"Check Birthdate-Components","title":"Inspect SGICs","text":"Since SGIC end date birth, can verify plausibility date birth using trustmebro::inspect_birthdaymonth. function checks string contains exactly four digits representing valid date birth. , can combine trustmebro::inspect_birthdaymonth dplyr::mutate generate plausibility check variable: SGICs use single day month person born. case, can use trustmebro::inspect_birthday trustmebro::inspect_birthmonth accordingly.","code":"sailor_students %>%    mutate(birthdate_check =             inspect_birthdaymonth(sgic)) %>%   select(sgic, birthdate_check) #> # A tibble: 12 × 2 #>    sgic             birthdate_check #>    <chr>            <lgl>           #>  1 \"MUC__0308\"      TRUE            #>  2 \"HÄT 2701\"       TRUE            #>  3 \"MUK3801\"        FALSE           #>  4 \"SAM10\"          FALSE           #>  5 \"T0601\"          TRUE            #>  6 \"      UIT3006 \" TRUE            #>  7 \"@@@@@@\"         FALSE           #>  8  NA              FALSE           #>  9 \" \"              FALSE           #> 10 \"MOA2210\"        TRUE            #> 11 \"MUK3801\"        FALSE           #> 12 \"T0601\"          TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"non-sgic-variables-plausibility","dir":"Articles","previous_headings":"","what":"Non-SGIC variables’ plausibility","title":"Inspect SGICs","text":"Besides SGIC, variables given dataset might used identify cases. mentioned , trustmebro::inspect_characterid can used string follow specific pattern. Furthermore, package also provides functions checking data types beyond strings.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"check-numbers","dir":"Articles","previous_headings":"Non-SGIC variables’ plausibility","what":"Check Numbers","title":"Inspect SGICs","text":"can use trustmebro::inspect_numberid check number matches expected length. dataset, school five-digit number. combined dplyr::mutate, can add plausibility variable schoolnumber, just :","code":"sailor_students %>%    mutate(school_check =             inspect_numberid(school, 5)) %>%   select(school, school_check) #> # A tibble: 12 × 2 #>    school school_check #>    <chr>  <lgl>        #>  1 54321  TRUE         #>  2 22345  TRUE         #>  3 22345  TRUE         #>  4 22345  TRUE         #>  5 65432  TRUE         #>  6 12345  TRUE         #>  7 NA     FALSE        #>  8 12345  TRUE         #>  9 unkown FALSE        #> 10 12345  TRUE         #> 11 22345  TRUE         #> 12 65432  TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"check-the-presence-of-a-value-within-the-recode-map","dir":"Articles","previous_headings":"Non-SGIC variables’ plausibility","what":"Check the presence of a value within the recode map","title":"Inspect SGICs","text":"process using non-SGIC variables identifiers, categorical data often recoded ensure consistency within workflow. can use trustmebro::inspect_valinvec check value exists recode map. recode map named vector, names represent keys. dataset, want inspect values gender conform recode map: function checks value present key. Combine dplyr::mutate add variable contains check results:","code":"recode_gender <- c(Male = \"M\", Female = \"F\") sailor_students %>%    mutate(gender_check =             inspect_valinvec(gender, recode_gender)) %>%   select(gender, gender_check) #> # A tibble: 12 × 2 #>    gender      gender_check #>    <chr>       <lgl>        #>  1 \"Male\"      TRUE         #>  2 \"???\"       FALSE        #>  3 \"Female\"    TRUE         #>  4 \"Female  \"  FALSE        #>  5 \"Female\"    TRUE         #>  6  NA         FALSE        #>  7 \"Female\"    TRUE         #>  8 \"   Female\" FALSE        #>  9 \"Female\"    TRUE         #> 10 \"Female\"    TRUE         #> 11 \"Female\"    TRUE         #> 12 \"Female\"    TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/articles/inspect_sgics.html","id":"identify-duplicate-cases","dir":"Articles","previous_headings":"","what":"Identify Duplicate Cases","title":"Inspect SGICs","text":"far, ’ve checked SGIC, school gender contain plausible values. Last, want ensure variables, used together identifiers, uniquely identify single case duplicate entries based variables. trustmebro::find_dupes checks whether combination identifiers unique adding has_dupes variable dataset. find duplicates data, use like :","code":"sailor_students %>% find_dupes(school, sgic, gender) %>%   select(school, sgic, gender, has_dupes) #> # A tibble: 12 × 4 #>    school sgic             gender      has_dupes #>    <chr>  <chr>            <chr>       <lgl>     #>  1 54321  \"MUC__0308\"      \"Male\"      FALSE     #>  2 22345  \"HÄT 2701\"       \"???\"       FALSE     #>  3 22345  \"MUK3801\"        \"Female\"    TRUE      #>  4 22345  \"SAM10\"          \"Female  \"  FALSE     #>  5 65432  \"T0601\"          \"Female\"    TRUE      #>  6 12345  \"      UIT3006 \"  NA         FALSE     #>  7 NA     \"@@@@@@\"         \"Female\"    FALSE     #>  8 12345   NA              \"   Female\" FALSE     #>  9 unkown \" \"              \"Female\"    FALSE     #> 10 12345  \"MOA2210\"        \"Female\"    FALSE     #> 11 22345  \"MUK3801\"        \"Female\"    TRUE      #> 12 65432  \"T0601\"          \"Female\"    TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Annemarie Pläschke. Author, maintainer. Tobias Brändle. Author.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pläschke , Brändle T (2025). trustmebro: inspect clean SGIC-related data. R package version 0.1.0, https://kuuuwe.github.io/trustmebro/.","code":"@Manual{,   title = {trustmebro: inspect and clean SGIC-related data},   author = {Annemarie Pläschke and Tobias Brändle},   year = {2025},   note = {R package version 0.1.0},   url = {https://kuuuwe.github.io/trustmebro/}, }"},{"path":[]},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"inspect and clean SGIC-related data","text":"trustmebro designed make data wrangling ID-related aspects comfortable. package provides functions make easy inspect various subject-generated ID codes (SGIC) plausibility. also helps inspecting common identifiers, ensuring data stays clean reliable. Beyond plausibility checks, trustmebro offers tools smooth data import convenient recoding. ’re working messy IDs, package got covered. Trust , bro!","code":""},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"context-and-use","dir":"","previous_headings":"Overview","what":"Context and Use","title":"inspect and clean SGIC-related data","text":"trustmebro developed specifically data linkage trusted third party (Vertrauensstelle: https://ifbq.hamburg.de/datenmanagement/vertrauensstelle/) Authority Schools Vocational Education Hamburg, Germany (Behörde für Schule und Berufsbildung Hamburg). use package exclusively linking student data research purposes.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"inspecting-ids","dir":"","previous_headings":"Overview","what":"Inspecting IDs","title":"inspect and clean SGIC-related data","text":"trustmebro offers several functions checking plausibility SGICs variables might used identifiers. Best check vignette(trustmebro::inspect_sgics) learn perform plausibility checks IDs.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"comfy-stuff","dir":"","previous_headings":"Overview","what":"Comfy Stuff","title":"inspect and clean SGIC-related data","text":"trustmebro also comes functions make day--day business messy data comfortable. want comfy loading recoding data, take look vignette(trustmebro::get_data_matchready).","code":""},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"installation","dir":"","previous_headings":"Overview","what":"Installation","title":"inspect and clean SGIC-related data","text":"trustmebro yet available CRAN, ’re actively working towards release . meantime, can easily install latest development version directly GitHub. , ’ll need remotes package. don’t already, install {r install_remotes, message=FALSE} install.packages(\"remotes\") , use following command install trustmebro {r install_trustmebro, message=FALSE} remotes::install_github(\"kuuuwe/trustmebro\") download install package dependencies. Keep eye CRAN release, simplify installation future.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/index.html","id":"getting-help","dir":"","previous_headings":"Overview","what":"Getting Help","title":"inspect and clean SGIC-related data","text":"run bug, best way get help create new issue package’s GitHub page, describing problem including code using. ’re comfortable GitHub, can also contact developers, making sure explain happened trying .","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/find_dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify duplicate cases — find_dupes","title":"Identify duplicate cases — find_dupes","text":"Identify duplicate cases data frame tibble based specific variables. logical column `has_dupes` added, indicates whether row duplicate values based provided variables.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/find_dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify duplicate cases — find_dupes","text":"","code":"find_dupes(data, ...)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/find_dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify duplicate cases — find_dupes","text":"data data frame tibble ... Variable names check duplicates","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/find_dupes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify duplicate cases — find_dupes","text":"original data frame tibble additional logical column 'has_dupes' `TRUE` rows duplicates based specified variables `FALSE` otherwise.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/find_dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify duplicate cases — find_dupes","text":"","code":"# Example data print(sailor_students) #> # A tibble: 12 × 6 #>    sgic             school class   gender  testscore_langauge testscore_calculus #>    <chr>            <chr>  <chr>   <chr>                <dbl>              <dbl> #>  1 \"MUC__0308\"      54321  \"3-B \"  \"Male\"                 425                394 #>  2 \"HÄT 2701\"       22345  \"2-A\"   \"???\"                 4596                123 #>  3 \"MUK3801\"        22345  \"  2-B\" \"Femal…               2456               9485 #>  4 \"SAM10\"          22345  \"3-B\"   \"Femal…               2345                  3 #>  5 \"T0601\"          65432  \"1-C\"   \"Femal…               1234                 NA #>  6 \"      UIT3006 \" 12345  \"3-3\"    NA                    123                394 #>  7 \"@@@@@@\"         NA     \"3_2  \" \"Femal…                 56               2938 #>  8  NA              12345  \"3@41\"  \"   Fe…                986               3948 #>  9 \" \"              unkown  NA     \"Femal…                284                205 #> 10 \"MOA2210\"        12345  \" \"     \"Femal…                105                 21 #> 11 \"MUK3801\"        22345  \"2-B\"   \"Femal…               9586                934 #> 12 \"T0601\"          65432  \"1-C\"   \"Femal…                 NA                764  # Find duplicate cases based on 'sgic', 'school' and 'class' sailor_students_dupes <- find_dupes(sailor_students, sgic, school, class)  # Rows where 'has_dupes' is `TRUE` indicate duplicates based on the provided columns print(sailor_students_dupes) #> # A tibble: 12 × 7 #>    sgic      school class gender testscore_langauge testscore_calculus has_dupes #>    <chr>     <chr>  <chr> <chr>               <dbl>              <dbl> <lgl>     #>  1 \"MUC__03… 54321  \"3-B… \"Male\"                425                394 FALSE     #>  2 \"HÄT 270… 22345  \"2-A\" \"???\"                4596                123 FALSE     #>  3 \"MUK3801\" 22345  \"  2… \"Fema…               2456               9485 FALSE     #>  4 \"SAM10\"   22345  \"3-B\" \"Fema…               2345                  3 FALSE     #>  5 \"T0601\"   65432  \"1-C\" \"Fema…               1234                 NA TRUE      #>  6 \"      U… 12345  \"3-3\"  NA                   123                394 FALSE     #>  7 \"@@@@@@\"  NA     \"3_2… \"Fema…                 56               2938 FALSE     #>  8  NA       12345  \"3@4… \"   F…                986               3948 FALSE     #>  9 \" \"       unkown  NA   \"Fema…                284                205 FALSE     #> 10 \"MOA2210\" 12345  \" \"   \"Fema…                105                 21 FALSE     #> 11 \"MUK3801\" 22345  \"2-B\" \"Fema…               9586                934 FALSE     #> 12 \"T0601\"   65432  \"1-C\" \"Fema…                 NA                764 TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthday.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect birthday-component of a string — inspect_birthday","title":"Inspect birthday-component of a string — inspect_birthday","text":"Check whether given string contains exactly one two-digit number represents valid day month (01 31). string assumed code (e.g., SGIC), may include letters digits.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect birthday-component of a string — inspect_birthday","text":"","code":"inspect_birthday(code)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect birthday-component of a string — inspect_birthday","text":"code character string containing SGIC similar code may include numeric birthday-component.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect birthday-component of a string — inspect_birthday","text":"logical value: `TRUE` string contains one valid birthday-component (01 31), otherwise `FALSE`.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect birthday-component of a string — inspect_birthday","text":"","code":"inspect_birthday(\"DEF66\") # FALSE - 66 is not a valid day #> [1] FALSE inspect_birthday(\"GHI02\") # TRUE - 02 is a valid day #> [1] TRUE inspect_birthday(\"ABC12DEF34\") # FALSE - Multiple numeric components #> [1] FALSE inspect_birthday(\"XYZ\") # FALSE - No numeric component #> [1] FALSE inspect_birthday(\"JKL31\") # TRUE - 31 is a valid day #> [1] TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthdaymonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","title":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","text":"Checks whether given string contains exactly one four-digit number representing valid combination day (birthday) month (birth month). Numeric components can interpreted either \"DDMM\" (day-month) \"MMDD\" (month-day) format, depending specified format. string assumed code (e.g., SGIC), may include letters digits.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthdaymonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","text":"","code":"inspect_birthdaymonth(code, format = \"DDMM\")"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthdaymonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","text":"code character string containing SGIC similar code may include numeric component representing birthday birth month. format string specifying format date birth components code. Use \"DDMM\" day-month format \"MMDD\" month-day format. Default \"DDMM\".","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthdaymonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","text":"logical value: `TRUE` string contains exactly one valid numeric component forms valid birthday (day month), otherwise `FALSE`.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthdaymonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect birthday- and birthmonth-component of a string — inspect_birthdaymonth","text":"","code":"inspect_birthdaymonth(\"DEF2802\") # TRUE - 28th of February is a valid date #> [1] TRUE inspect_birthdaymonth(\"GHI3002\") # FALSE - 30th of February is invalid #> [1] FALSE inspect_birthdaymonth(\"XYZ3112\") # TRUE - 31st of December is valid #> [1] TRUE inspect_birthdaymonth(\"18DEF02\") # FALSE - Multiple numeric components #> [1] FALSE inspect_birthdaymonth(\"XYZ\") # FALSE - No numeric components #> [1] FALSE inspect_birthdaymonth(\"ABC1231\", format = \"MMDD\") # TRUE - December 31st is valid #> [1] TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect birthmonth-component of a string — inspect_birthmonth","title":"Inspect birthmonth-component of a string — inspect_birthmonth","text":"Check whether given string contains exactly one two-digit number represents valid month year (01 12). string assumed code (e.g., SGIC), may include letters digits.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect birthmonth-component of a string — inspect_birthmonth","text":"","code":"inspect_birthmonth(code)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect birthmonth-component of a string — inspect_birthmonth","text":"code character string containing SGIC similar code may include numeric birth month-component.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect birthmonth-component of a string — inspect_birthmonth","text":"logical value: `TRUE` string contains one valid birth month-component (01 12), otherwise `FALSE`.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_birthmonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect birthmonth-component of a string — inspect_birthmonth","text":"","code":"inspect_birthday(\"DEF66\") # FALSE - 66 is not a valid month #> [1] FALSE inspect_birthday(\"GHI02\") # TRUE - 02 (February) is a valid month #> [1] TRUE inspect_birthday(\"ABC12DEF10\") # FALSE - Multiple numeric components #> [1] FALSE inspect_birthday(\"XYZ\") # FALSE - No numeric component #> [1] FALSE inspect_birthday(\"JKL11\") # TRUE - 11 (November) is a valid day #> [1] TRUE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_characterid.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect if a string matches an expected pattern — inspect_characterid","title":"Inspect if a string matches an expected pattern — inspect_characterid","text":"Check whether given string matches specified pattern using regular expressions (regex). string assumed code (e.g., SGIC), follow predefined format.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_characterid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect if a string matches an expected pattern — inspect_characterid","text":"","code":"inspect_characterid(code, pattern)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_characterid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect if a string matches an expected pattern — inspect_characterid","text":"code character string containing SGIC similar code follow predefined format. pattern character string specifying expected pattern using regular expressions (regex). pattern defines format `code` match.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_characterid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect if a string matches an expected pattern — inspect_characterid","text":"logical value: `TRUE` code matches expected pattern, otherwise `FALSE`","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_characterid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect if a string matches an expected pattern — inspect_characterid","text":"","code":"inspect_characterid(\"ABC1234\", \"^[A-Za-z]{3}[0-9]{4}$\") #TRUE - Matches the pattern #> [1] TRUE inspect_characterid(\"12DBG45FG\", \"^[A-Za-z]{3}[0-9]{4}$\") #FALSE - Does not match the pattern #> [1] FALSE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_numberid.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect if a number has the expected length — inspect_numberid","title":"Inspect if a number has the expected length — inspect_numberid","text":"Check whether given numeric value expected number digits.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_numberid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect if a number has the expected length — inspect_numberid","text":"","code":"inspect_numberid(number, expected_length)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_numberid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect if a number has the expected length — inspect_numberid","text":"number numeric value. expected_length integer specifying expected number digits.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_numberid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect if a number has the expected length — inspect_numberid","text":"logical value: `TRUE` `number` expected length consists digits, otherwise `FALSE`.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_numberid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect if a number has the expected length — inspect_numberid","text":"","code":"inspect_numberid(12345, 5)  # TRUE - 5 digits #> [1] TRUE inspect_numberid(1234, 5)    # FALSE - 4 digits #> [1] FALSE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_valinvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect if a value is in a recode map — inspect_valinvec","title":"Inspect if a value is in a recode map — inspect_valinvec","text":"Check whether given value present key specified recode map. Inputs can validated set predefined categories labels.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_valinvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect if a value is in a recode map — inspect_valinvec","text":"","code":"inspect_valinvec(value, recode_map)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_valinvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect if a value is in a recode map — inspect_valinvec","text":"value single value inspect, checked keys recode map. recode_map named vector names represent keys check . values vector ignored.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_valinvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect if a value is in a recode map — inspect_valinvec","text":"logical value: `TRUE` `value` key `recode_map`, otherwise `FALSE`.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/inspect_valinvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect if a value is in a recode map — inspect_valinvec","text":"","code":"recode_map <- c(male = \"M\", female = \"F\") inspect_valinvec(\"female\", recode_map) # TRUE - \"female\" is a key in the recode map #> [1] TRUE inspect_valinvec(\"other\", recode_map) # FALSE - \"other\" is not a key in the recode map #> [1] FALSE"},{"path":"https://kuuuwe.github.io/trustmebro/reference/purge_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Purge strings in a data frame — purge_string","title":"Purge strings in a data frame — purge_string","text":"Clean specified character columns data frame tibble removing non-alphanumeric characters, replacing specified character (default \"#\"). Also replaces NA values allows additional characters keep cleaned strings. resulting strings converted uppercase.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/purge_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purge strings in a data frame — purge_string","text":"","code":"purge_string(data, ..., replacement = \"#\", keep = \"\")"},{"path":"https://kuuuwe.github.io/trustmebro/reference/purge_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purge strings in a data frame — purge_string","text":"data data frame tibble containing columns cleaned. ... Variables clean. none provided, character columns processed. replacement character string used replace unwanted characters empty strings. Default \"#\". keep character string containing additional characters retained cleaned strings.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/purge_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purge strings in a data frame — purge_string","text":"data frame tibble specified character columns cleaned modified per given parameters.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/purge_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purge strings in a data frame — purge_string","text":"","code":"# Example data print(sailor_students) #> # A tibble: 12 × 6 #>    sgic             school class   gender  testscore_langauge testscore_calculus #>    <chr>            <chr>  <chr>   <chr>                <dbl>              <dbl> #>  1 \"MUC__0308\"      54321  \"3-B \"  \"Male\"                 425                394 #>  2 \"HÄT 2701\"       22345  \"2-A\"   \"???\"                 4596                123 #>  3 \"MUK3801\"        22345  \"  2-B\" \"Femal…               2456               9485 #>  4 \"SAM10\"          22345  \"3-B\"   \"Femal…               2345                  3 #>  5 \"T0601\"          65432  \"1-C\"   \"Femal…               1234                 NA #>  6 \"      UIT3006 \" 12345  \"3-3\"    NA                    123                394 #>  7 \"@@@@@@\"         NA     \"3_2  \" \"Femal…                 56               2938 #>  8  NA              12345  \"3@41\"  \"   Fe…                986               3948 #>  9 \" \"              unkown  NA     \"Femal…                284                205 #> 10 \"MOA2210\"        12345  \" \"     \"Femal…                105                 21 #> 11 \"MUK3801\"        22345  \"2-B\"   \"Femal…               9586                934 #> 12 \"T0601\"          65432  \"1-C\"   \"Femal…                 NA                764  # Clean all character columns, replacing unwanted characters with \"#\", retaining \"-\"  sailor_students_cleaned <-  purge_string(sailor_students, sgic, school, class, gender, keep = \"-\")  # Tibble with cleaned 'sgic', 'school', 'class' and 'gender' columns print(sailor_students_cleaned) #> # A tibble: 12 × 6 #>    sgic      school class gender testscore_langauge testscore_calculus #>    <chr>     <chr>  <chr> <chr>               <dbl>              <dbl> #>  1 MUC##0308 54321  3-B   MALE                  425                394 #>  2 H#T2701   22345  2-A   ###                  4596                123 #>  3 MUK3801   22345  2-B   FEMALE               2456               9485 #>  4 SAM10     22345  3-B   FEMALE               2345                  3 #>  5 T0601     65432  1-C   FEMALE               1234                 NA #>  6 UIT3006   12345  3-3   #                     123                394 #>  7 ######    #      3#2   FEMALE                 56               2938 #>  8 #         12345  3#41  FEMALE                986               3948 #>  9 #         UNKOWN #     FEMALE                284                205 #> 10 MOA2210   12345  #     FEMALE                105                 21 #> 11 MUK3801   22345  2-B   FEMALE               9586                934 #> 12 T0601     65432  1-C   FEMALE                 NA                764"},{"path":"https://kuuuwe.github.io/trustmebro/reference/recode_valinvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode a variable — recode_valinvec","title":"Recode a variable — recode_valinvec","text":"Recode specified variable data frame tibble based provided recode map. recode map empty, original variable retained new name.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/recode_valinvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode a variable — recode_valinvec","text":"","code":"recode_valinvec(data, var, recode_map, new_var)"},{"path":"https://kuuuwe.github.io/trustmebro/reference/recode_valinvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode a variable — recode_valinvec","text":"data data frame tibble. var variable recoded. recode_map named vector specifying recode map. new_var Name new variable holding recoded values.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/recode_valinvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode a variable — recode_valinvec","text":"data frame tibble new variable added.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/recode_valinvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode a variable — recode_valinvec","text":"","code":"# Example data print(sailor_students) #> # A tibble: 12 × 6 #>    sgic             school class   gender  testscore_langauge testscore_calculus #>    <chr>            <chr>  <chr>   <chr>                <dbl>              <dbl> #>  1 \"MUC__0308\"      54321  \"3-B \"  \"Male\"                 425                394 #>  2 \"HÄT 2701\"       22345  \"2-A\"   \"???\"                 4596                123 #>  3 \"MUK3801\"        22345  \"  2-B\" \"Femal…               2456               9485 #>  4 \"SAM10\"          22345  \"3-B\"   \"Femal…               2345                  3 #>  5 \"T0601\"          65432  \"1-C\"   \"Femal…               1234                 NA #>  6 \"      UIT3006 \" 12345  \"3-3\"    NA                    123                394 #>  7 \"@@@@@@\"         NA     \"3_2  \" \"Femal…                 56               2938 #>  8  NA              12345  \"3@41\"  \"   Fe…                986               3948 #>  9 \" \"              unkown  NA     \"Femal…                284                205 #> 10 \"MOA2210\"        12345  \" \"     \"Femal…                105                 21 #> 11 \"MUK3801\"        22345  \"2-B\"   \"Femal…               9586                934 #> 12 \"T0601\"          65432  \"1-C\"   \"Femal…                 NA                764  # Define a recode map for gender recode_map_gender <- c(\"Female\" = \"F\", \"Male\" = \"M\", \"Other\" = \"X\")  # Recode gender sailor_students_recoded <-  recode_valinvec(sailor_students, gender, recode_map_gender, recode_gender)  # A tibble with a recoded gender variable print(sailor_students_recoded) #> # A tibble: 12 × 7 #>    sgic  school class gender testscore_langauge testscore_calculus recode_gender #>    <chr> <chr>  <chr> <chr>               <dbl>              <dbl> <chr>         #>  1 \"MUC… 54321  \"3-B… \"Male\"                425                394 \"M\"           #>  2 \"HÄT… 22345  \"2-A\" \"???\"                4596                123 \"???\"         #>  3 \"MUK… 22345  \"  2… \"Fema…               2456               9485 \"F\"           #>  4 \"SAM… 22345  \"3-B\" \"Fema…               2345                  3 \"Female  \"    #>  5 \"T06… 65432  \"1-C\" \"Fema…               1234                 NA \"F\"           #>  6 \"   … 12345  \"3-3\"  NA                   123                394  NA           #>  7 \"@@@… NA     \"3_2… \"Fema…                 56               2938 \"F\"           #>  8  NA   12345  \"3@4… \"   F…                986               3948 \"   Female\"   #>  9 \" \"   unkown  NA   \"Fema…                284                205 \"F\"           #> 10 \"MOA… 12345  \" \"   \"Fema…                105                 21 \"F\"           #> 11 \"MUK… 22345  \"2-B\" \"Fema…               9586                934 \"F\"           #> 12 \"T06… 65432  \"1-C\" \"Fema…                 NA                764 \"F\""},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"key data on students from the sailor moon universe — sailor_keys","title":"key data on students from the sailor moon universe — sailor_keys","text":"fictional key data set.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"key data on students from the sailor moon universe — sailor_keys","text":"","code":"sailor_keys"},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"key data on students from the sailor moon universe — sailor_keys","text":"`sailor_keys` tibble 12 rows 6 columns: schoolyear schoolyear guid hexadecimal ID number name, birthday, sex student information school, schoolnumber, class, grade_level school information sgic1, sgic2, sgic3 subject generated ID","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_students.html","id":null,"dir":"Reference","previous_headings":"","what":"assessment data on students from the sailor moon universe — sailor_students","title":"assessment data on students from the sailor moon universe — sailor_students","text":"fictional assessment data set.","code":""},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_students.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assessment data on students from the sailor moon universe — sailor_students","text":"","code":"sailor_students"},{"path":"https://kuuuwe.github.io/trustmebro/reference/sailor_students.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"assessment data on students from the sailor moon universe — sailor_students","text":"`sailor_students` tibble 12 rows 6 columns: sgic Subject generated ID school schoolnumber class class designation gender gender testscore_language, testscore_calculus testscores","code":""}]
