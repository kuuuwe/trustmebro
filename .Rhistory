})
check()
df <- tibble:tibble( name = c(ÄNNÖ))
df <- tibble:tibble( name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+"), grade = c("werf"))
View(df)
df_test <- replace_nonalnum_in_df(df)
View(df_test)
check()
unload()
build_site()
library(devtools)
build_manual()
build()
library(devtools)
library(roxygen2)
library(testthat)
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
#edge cases
test_that("report_invalid_sex handles an empty data frame", {
# data
data <- tibble::tibble(
sex = character(0)
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = character(0)
)
# call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
test_that("report_invalid_sex handles an empty recode map", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c()
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# call fucntion
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
#edge cases
test_that("report_invalid_sex handles an empty data frame", {
# data
data <- tibble::tibble(
sex = character(0)
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = character(0)
)
# call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
test_that("report_invalid_sex handles an empty recode map", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c()
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# call fucntion
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
unload()
check()
load_all()
unload()
check()
load()
load_all()
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_error(inspect_birthmonth("AAA0101", 5))
})
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_equal(inspect_schoolnumber("AAA0101", FALSE))
})
expect_equal(inspect_schoolnumber("AAA0101", 4, FALSE))
expect_equal(inspect_schoolnumber("AAA0101", 4), FALSE)
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_equal(inspect_schoolnumber("AAA0101", 4), FALSE)
})
test_that("report_invalid_schoolnumber actually extracts all invalid schoolnumbers", {
# simulate testdata
data <- tibble(
schoolnumber = c(12345, 54321, 123)
)
# apply function
invalid_schoolnumbers <- report_invalid_schoolnumber(data, "schoolnumber", 5)
# test number of rows
expect_equal(nrow(invalid_schoolnumbers), 1)
})
unload()
check()
library(devtools)
library(roxygen2)
library(pkgdown)
library(testthat)
load_all()
document()
load_all()
load_all()
load_all()
document()
load_all()
document()
unload()
check()
document()
check()
test_that("replace_nonalnum_in_df handles no character columns with NAs correctly", {
df <- data.frame(
age = c(25, NA, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- data.frame(
age = c("25", "#", "35"),
height = c("170", "180", "175")
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns with NAs correctly", {
df <- data.frame(
age = c(25, NA, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- data.frame(
age = c("25", "#", "35"),
height = c(170, 180, 175)
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
document()
load_all()
test_that("replace_nonalnum_in_df handles no character columns with NAs correctly", {
df <- data.frame(
age = c(25, NA, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- data.frame(
age = c("25", "#", "35"),
height = c(170, 180, 175)
)
# call function
df_modified <- replace_nonalnum_in_df(df,age, "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisateststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasumlautsandspec#alchar#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
library(tibble)
# generate keydata sailor students
keys_sailor_students <- tibble(
schoolyear = c(2223, 2223, 2223, 2223, 2223,
2223, 2223, 2223, 2223, 2223,
2324, 2324, 2324, 2324, 2324,
2324, 2324, 2324, 2324, 2324),
guid = c("3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C",
"3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C"),
name = c("Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe",
"Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe"),
school = c("Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy",
"Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy"),
schoolnumber = c(12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432,
12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432),
class = c("3-3", "3-2", "3-1", "3-4", "3-2",
"3-B", "2-A", "2-B", "3-B", "1-C",
"4-3", "4-2", "4-1", "4-4", "4-2",
"4-B", "3-A", "3-B", "4-B", "2-C"),
grade_level = c(9, 9, 9, 9, 9,
11, 10, 10, 10, 8,
10, 10, 10, 10, 10,
12, 11, 11, 11, 9),
birthday = as.Date(c("1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06",
"1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06")),
sex = c("F", "F", "F", "F", "F",
"M", "F", "F", "F", "F",
"F", "F", "F", "F", "F",
"M", "F", "F", "F", "F"),
#sgic1 = first letter firstname, last letter first name, first letter lastname, birthday, birthmonth
sgic1 = c("UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601",
"UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601"),
#sgic2 = second letter first name, third letter first name, birthday
sgic2 = c("SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06",
"SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06"),
#sgic3 = first four letters lastname, birthmonth
sgic3 = c("TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01",
"TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01"))
#generate department data sailor students
testdata_sailor_students <- tibble(
sigc = c("MUC__0308", "HÄT 2701", "MUK3801", "SAM10", "T0601",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210",
"MUK3801", "T0601"),
school = c(54321, 22345, 22345, 22345, 65432,
12345, NA, 12345, "unkown", 12345,
22345, 65432),
class = c("3-B ", "2-A", "  2-B", "3-B", "1-C",
"3-3", "3_2  ", "3@41", NA, " ",
"2-B", "1-C"),
gender = c("Male", "???", "Female", "Female  ", "Female",
NA, "Female", "   Female", "Female", "Female",
"Female", "Female"),
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA),
testscore_calculus = c(394, 123, 9485, 3, NA,
394, 2938, 3948, 205, 21,
934, 764))
use_data_raw()
## code to prepare `sailor students` dataset goes here
sailor_students <- tibble(
sigc = c("MUC__0308", "HÄT 2701", "MUK3801", "SAM10", "T0601",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210",
"MUK3801", "T0601"),
school = c(54321, 22345, 22345, 22345, 65432,
12345, NA, 12345, "unkown", 12345,
22345, 65432),
class = c("3-B ", "2-A", "  2-B", "3-B", "1-C",
"3-3", "3_2  ", "3@41", NA, " ",
"2-B", "1-C"),
gender = c("Male", "???", "Female", "Female  ", "Female",
NA, "Female", "   Female", "Female", "Female",
"Female", "Female"),
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA),
testscore_calculus = c(394, 123, 9485, 3, NA,
394, 2938, 3948, 205, 21,
934, 764))
usethis::use_data(sailor_students, overwrite = TRUE)
document()
document()
check()
View(sailor_students)
document()
document()
check()
View(keys_sailor_students)
str(keys_sailor_students)
document()
library(tibble)
keys_sailor_students <- tibble(
schoolyear = c(2223, 2223, 2223, 2223, 2223,
2223, 2223, 2223, 2223, 2223,
2324, 2324, 2324, 2324, 2324,
2324, 2324, 2324, 2324, 2324),
guid = c("3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C",
"3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C"),
name = c("Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe",
"Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe"),
school = c("Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy",
"Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy"),
schoolnumber = c(12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432,
12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432),
class = c("3-3", "3-2", "3-1", "3-4", "3-2",
"3-B", "2-A", "2-B", "3-B", "1-C",
"4-3", "4-2", "4-1", "4-4", "4-2",
"4-B", "3-A", "3-B", "4-B", "2-C"),
grade_level = c(9, 9, 9, 9, 9,
11, 10, 10, 10, 8,
10, 10, 10, 10, 10,
12, 11, 11, 11, 9),
birthday = as.Date(c("1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06",
"1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06")),
sex = c("F", "F", "F", "F", "F",
"M", "F", "F", "F", "F",
"F", "F", "F", "F", "F",
"M", "F", "F", "F", "F"),
#sgic1 = first letter firstname, last letter first name, first letter lastname, birthday, birthmonth
sgic1 = c("UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601",
"UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601"),
#sgic2 = second letter first name, third letter first name, birthday
sgic2 = c("SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06",
"SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06"),
#sgic3 = first four letters lastname, birthmonth
sgic3 = c("TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01",
"TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01"))
usethis::use_data(sailor_keys, overwrite = TRUE)
library(tibble)
sailor_keys <- tibble(
schoolyear = c(2223, 2223, 2223, 2223, 2223,
2223, 2223, 2223, 2223, 2223,
2324, 2324, 2324, 2324, 2324,
2324, 2324, 2324, 2324, 2324),
guid = c("3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C",
"3F5A2C", "9B1D7E", "F0E5C1", "7A4B3D", "8C9A2F",
"1F4D9B", "E2B67A", "4C3E1D", "AA9D2F", "5B8E3C"),
name = c("Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe",
"Usagi Tsukino", "Ami Mizuno", "Rei Hino", "Makoto Kino", "Minako Aino",
"Mamoru Chiba", "Haruka Tenou", "Michiru Kaioh", "Setsuna Meiou", "Hotaru Tomoe"),
school = c("Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy",
"Juban Junior High School", "Juban Junior High School", "Juban Junior High School",
"Juban Junior High School", "Juban Junior High School", "Shiba High School",
"Juban High School", "Juban High School", "Juban High School", "Mugen Academy"),
schoolnumber = c(12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432,
12345, 12345, 12345,
12345, 12345, 54321,
22345, 22345, 22345, 65432),
class = c("3-3", "3-2", "3-1", "3-4", "3-2",
"3-B", "2-A", "2-B", "3-B", "1-C",
"4-3", "4-2", "4-1", "4-4", "4-2",
"4-B", "3-A", "3-B", "4-B", "2-C"),
grade_level = c(9, 9, 9, 9, 9,
11, 10, 10, 10, 8,
10, 10, 10, 10, 10,
12, 11, 11, 11, 9),
birthday = as.Date(c("1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06",
"1978-06-30", "1979-09-10", "1978-11-30", "1979-12-05", "1979-10-22",
"1978-08-03", "1978-01-27", "1978-01-06", "1978-10-29", "1979-01-06")),
sex = c("F", "F", "F", "F", "F",
"M", "F", "F", "F", "F",
"F", "F", "F", "F", "F",
"M", "F", "F", "F", "F"),
#sgic1 = first letter firstname, last letter first name, first letter lastname, birthday, birthmonth
sgic1 = c("UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601",
"UIT3006", "AIM1009", "RIH3011", "MOK0512", "MOA2210",
"MUC0308", "HAT2701", "MUK0601", "SAM2910", "HUT0601"),
#sgic2 = second letter first name, third letter first name, birthday
sgic2 = c("SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06",
"SA30", "MI10", "EI30", "AK05", "IN22",
"AM03", "AR27", "IC06", "ET29", "OT06"),
#sgic3 = first four letters lastname, birthmonth
sgic3 = c("TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01",
"TSU03", "MIZ09", "HIN11", "KIN12", "AIN10",
"CHI08", "TEN01", "KAI01", "MEI10", "TOM01"))
usethis::use_data(sailor_keys, overwrite = TRUE)
document()
check()
build_site()
document()
check()
check()
