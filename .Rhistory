build_site()
buid_site()
build_site()
pkgdown::preview_page('reference/inspect_birthday.html')
document()
document()
document()
check()
unload()
build_site()
document()
unload()
build_site()
document()
unload()
build_site()
pkgdown::preview_page('reference/inspect_birthday.html')
document()
unload()
build_site()
document8
document()
unload()
build_site()
document()
unload()
build_site()
pkgdown::preview_page('reference/purge_string.html')
document()
check()
unload()
build_site()
document()
document()
unload()
build_site()
document()
unload()
check()
unload()
buuild_site()
build_site()
library(devtools)
library(roxygen2)
library(testthat)
library(usethis)
library(pkgdown)
document()
check()
document()
check()
test_that("inspect_characterid actually identifies expected pattern", {
expect_equal(inspect_characterid("ABC1234", "^[A-Za-z]{3}[0-9]{4}$"), TRUE)
expect_equal(inspect_characterid("1234ABC", "^[A-Za-z]{3}[0-9]{4}$"), FALSE)
})
test_that("inspect_characterid actually identifies expected pattern", {
expect_equal(inspect_characterid("ABC1234", "^[A-Za-z]{3}[0-9]{4}$"), TRUE)
expect_equal(inspect_characterid("1234ABC", "^[A-Za-z]{3}[0-9]{4}$"), FALSE)
expect_error(inspect_characterid(12345, "^[A-Za-z]{3}[0-9]{4}$"))
})
test_that("inspect_numericid detects if number has the expected length", {
expect_equal(inspect_numericid(12345, 5), TRUE)
expect_equal(inspect_numericid(123, 5), FALSE)
expect_equal(inspect_numericid("AAA0101", 4), FALSE)
expect_equal(inspect_numericid(123.456))
})
inspect_numericid(123,45)
inspect_numericid(123.45)
expect_error(inspect_numericid(123.456))
test_that("inspect_numericid detects if number has the expected length", {
expect_equal(inspect_numericid(12345, 5), TRUE)
expect_equal(inspect_numericid(123, 5), FALSE)
expect_equal(inspect_numericid("AAA0101", 4), FALSE)
expect_error(inspect_numericid(123.456))
})
#common cases
test_that("inspect_valinvec correctly identifies values in the recode map", {
recode_map <- c(male = "M", female = "F")
expect_false(inspect_valinvec("FEMALE", recode_map))
expect_true(inspect_valinvec("male", recode_map))
expect_false(inspect_valinvec("other", recode_map))
expect_true(inspect_valinvec("female", recode_map))
})
# edge cases
test_that("inspect_valinvec handles empty recode_map", {
recode_map <- c()
expect_false(inspect_valinvec("male", recode_map))
expect_false(inspect_valinvec("female", recode_map))
})
test_that("inspect_valinvec is case-sensitive", {
recode_map <- c(MALE = "M", FEMALE = "F")
expect_false(inspect_valinvec("male", recode_map))
expect_false(inspect_valinvec("female", recode_map))
expect_true(inspect_valinvec("MALE", recode_map))
expect_true(inspect_valinvec("FEMALE", recode_map))
})
#common cases
test_that("purge_string removes spaces and replaces non-alphanumeric characters", {
df <- sailor_students %>% select(sgic)
expected_df <- tibble(
sgic = c("MUC##0308", "H#T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
df_modified <- purge_string(df, sgic, replacement = "#")
expect_equal(df_modified, expected_df)
})
test_that("purge_string handles no character columns correctly", {
df <- sailor_students %>% select(testscore_langauge)
expected_df <- tibble(
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA))
df_modified <- purge_string(df, replacement = "#")
expect_equal(df_modified, expected_df)
})
test_that("purge_string allows custom replacement character", {
df <- sailor_students %>% select(sgic)
expected_df <- tibble(
sgic = c("MUC$$0308", "H$T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
df_modified <- purge_string(df, sgic, replacement = "$")
expect_equal(df_modified, expected_df)
})
test_that("purge_string canbe used with pipe operator", {
df <- sailor_students %>% select(sgic)
expected_df <- tibble(
sgic = c("MUC$$0308", "H$T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
df_modified <- df %>% purge_string(sgic, replacement = "$")
expect_equal(df_modified, expected_df)
})
test_that("purge_string can handle keep-parameters", {
df <- sailor_students %>% select(sgic)
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
df_modified <- df %>% purge_string(sgic, replacement = "$", keep = "Ä_@")
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("purge_string handles empty data frame correctly", {
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
expected_df <- df
df_modified <- purge_string(df, replacement = "#")
expect_equal(df_modified, expected_df)
})
test_that("summon_data correctly loads data and selects specific columns", {
result <- summon_data(
filepath = system.file("data", "sailor_keys.rds", package = "dein_paket_name"),
selection = c(schoolyear, guid, schoolnumber)
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("year", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
result <- summon_data(
filepath = system.file("extdata", "sailor_keys.rds", package = "dein_paket_name"),
selection = c(schoolyear, guid, schoolnumber)
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("year", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
result <- summon_data(
filepath = system.file("data", "sailor_keys.rds", package = "trustmebro"),
selection = c(schoolyear, guid, schoolnumber)
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("year", "guid", "schoolnumber"))
})
load_all()
test_that("summon_data correctly loads data and selects specific columns", {
result <- summon_data(
filepath = system.file("data", "sailor_keys.rds", package = "trustmebro"),
selection = c(schoolyear, guid, schoolnumber)
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("year", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
expect_true(file.exists(filepath))
result <- summon_data(
filepath = system.file("data", "sailor_keys.rds", package = "trustmebro"),
selection = c(schoolyear, guid, schoolnumber)
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("year", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
# Definiere den richtigen Pfad zur Datei
filepath <- system.file("extdata", "sailor_keys.rds", package = "trustmebro")
# Stelle sicher, dass die Datei existiert
expect_true(file.exists(filepath))
# Lade die Daten und wähle spezifische Spalten
result <- summon_data(
filepath = filepath,
selection = c(schoolyear, guid, schoolnumber)
)
# Überprüfe, ob das Ergebnis eine tibble ist
expect_s3_class(result, "tbl_df")
# Überprüfe, ob genau 3 Spalten vorhanden sind
expect_equal(ncol(result), 3)
# Überprüfe, ob die Spalten korrekt benannt sind
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
# Definiere den richtigen Pfad zur Datei
filepath <- system.file("data", "sailor_keys.rds", package = "trustmebro")
# Stelle sicher, dass die Datei existiert
expect_true(file.exists(filepath))
# Lade die Daten und wähle spezifische Spalten
result <- summon_data(
filepath = filepath,
selection = c(schoolyear, guid, schoolnumber)
)
# Überprüfe, ob das Ergebnis eine tibble ist
expect_s3_class(result, "tbl_df")
# Überprüfe, ob genau 3 Spalten vorhanden sind
expect_equal(ncol(result), 3)
# Überprüfe, ob die Spalten korrekt benannt sind
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
# Verwende den Datensatz sailor_keys direkt aus dem Paket
data("sailor_keys", package = "trustmebro")
# Spezifische Spalten auswählen
result <- summon_data(
filepath = tempfile(),  # Hier verwenden wir einen temporären Pfad
selection = c(schoolyear, guid, schoolnumber)
)
# Überprüfe, ob das Ergebnis eine tibble ist
expect_s3_class(result, "tbl_df")
# Überprüfe, ob genau 3 Spalten vorhanden sind
expect_equal(ncol(result), 3)
# Überprüfe, ob die Spalten korrekt benannt sind
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
})
test_that("summon_data correctly loads data and selects specific columns", {
# Verwende den Datensatz sailor_keys direkt aus dem Paket
data("sailor_keys", package = "trustmebro")
# Speichere den Datensatz in einem temporären Pfad
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
# Lade die Daten mit summon_data() und wähle spezifische Spalten
result <- summon_data(
filepath = temp_filepath,
selection = c(schoolyear, guid, schoolnumber)
)
# Überprüfe, ob das Ergebnis eine tibble ist
expect_s3_class(result, "tbl_df")
# Überprüfe, ob genau 3 Spalten vorhanden sind
expect_equal(ncol(result), 3)
# Überprüfe, ob die Spalten korrekt benannt sind
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
# Lösche die temporäre Datei nach dem Test
unlink(temp_filepath)
})
test_that("summon_data correctly loads data and selects specific columns", {
# Verwende den Datensatz sailor_keys direkt aus dem Paket
data("sailor_keys", package = "trustmebro")
# Speichere den Datensatz in einem temporären Pfad
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
# Lade die Daten mit summon_data() und wähle spezifische Spalten
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber")
)
# Überprüfe, ob das Ergebnis eine tibble ist
expect_s3_class(result, "tbl_df")
# Überprüfe, ob genau 3 Spalten vorhanden sind
expect_equal(ncol(result), 3)
# Überprüfe, ob die Spalten korrekt benannt sind
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
# Lösche die temporäre Datei nach dem Test
unlink(temp_filepath)
})
test_that("summon_data correctly loads data and selects specific columns", {
data("sailor_keys", package = "trustmebro")
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber")
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
unlink(temp_filepath)
})
# common cases
test_that("summon_data correctly loads data and selects specific columns", {
data("sailor_keys", package = "trustmebro")
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber")
)
expect_s3_class(result, "tbl_df")
expect_equal(ncol(result), 3)
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
unlink(temp_filepath)
})
test_that("summon_data correctly filters data based on conditions", {
data("sailor_keys", package = "trustmebro")
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber"),
schoolyear == 2324
)
expect_s3_class(result, "tbl_df")
expect_true(all(result$schoolyear == 2023))
expect_equal(ncol(result), 3)
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
unlink(temp_filepath)
})
expect_true(all(result$schoolyear == 2324))
test_that("summon_data correctly filters data based on conditions", {
data("sailor_keys", package = "trustmebro")
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber"),
schoolyear == 2324
)
expect_s3_class(result, "tbl_df")
expect_true(all(result$schoolyear == 2324))
expect_equal(ncol(result), 3)
expect_named(result, c("schoolyear", "guid", "schoolnumber"))
unlink(temp_filepath)
})
test_that("summon_data returns the entire dataset when no selection is provided", {
data("sailor_keys", package = "trustmebro")
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(sailor_keys, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = NULL
)
expect_s3_class(result, "tbl_df")
expect_equal(nrow(result), nrow(sailor_keys))
expect_named(result, names(sailor_keys))
unlink(temp_filepath)
})
# edge cases
test_that("summon_data throws an error when file does not exist", {
expect_error(
summon_data(filepath = "non_existing_file.rds", selection = c("schoolyear", "guid", "schoolnumber")),
"cannot open the connection"
)
})
# edge cases
test_that("summon_data throws an error when file does not exist", {
expect_error(
summon_data(filepath = "non_existing_file.rds", selection = c("schoolyear", "guid", "schoolnumber")),
"cannot open the connection",
fixed = TRUE  # `fixed = TRUE` stellt sicher, dass der Fehlertext genau übereinstimmt
)
})
# edge cases
test_that("summon_data throws an error when file does not exist", {
expect_error(
summon_data(filepath = "non_existing_file.rds", selection = c("schoolyear", "guid", "schoolnumber"))
)
})
# edge cases
test_that("summon_data throws an error when file does not exist", {
expect_error(
summon_data(filepath = "non_existing_file.rds", selection = c("schoolyear", "guid", "schoolnumber")),
regexp = "No such file or directory",  # Hier verwenden wir einen allgemeinen Teil der Fehlermeldung
fixed = TRUE  # `fixed = TRUE` stellt sicher, dass die Fehlermeldung genau übereinstimmt
)
})
# edge cases
test_that("summon_data handles empty data frame correctly", {
empty_df <- tibble::tibble()
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(empty_df, temp_filepath)
result <- summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber")
)
expect_s3_class(result, "tbl_df")
expect_equal(nrow(result), 0)
unlink(temp_filepath)
})
# edge cases
test_that("summon_data handles empty data frame correctly", {
empty_df <- tibble::tibble()
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(empty_df, temp_filepath)
# Hier rufst du summon_data ohne spezifische Spalten auf
result <- summon_data(
filepath = temp_filepath
)
expect_s3_class(result, "tbl_df")
expect_equal(nrow(result), 0)  # Erwartet, dass das Ergebnis leer ist
expect_equal(ncol(result), 0)  # Überprüfe, ob es keine Spalten gibt
unlink(temp_filepath)
})
test_that("summon_data throws an error when selected columns do not exist", {
empty_df <- tibble::tibble()
temp_filepath <- tempfile(fileext = ".rds")
saveRDS(empty_df, temp_filepath)
expect_error(
summon_data(
filepath = temp_filepath,
selection = c("schoolyear", "guid", "schoolnumber")
),
regexp = "Selected columns do not exist in the data frame.",
fixed = TRUE
)
unlink(temp_filepath)
})
check()
document()
check()
unload()
build_site()
load_all()
pkgdown::preview_page('reference/summon_data.html')
pkgdown::preview_page('reference/summon_data.html')
library(devtools)
check()
check()
check()
document()
check()
document()
check()
<<<<<<< HEAD
=======
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
library(devtools)
build()
>>>>>>> kuwehome
>>>>>>> 58cc233519bb3dcd24c33c91a6ba749cd863a517
library(devtools)
library(roxygen2)
library(usethis)
library(pkgdown)
library(usethis)
build_site()
check()
unload()
build_site()
build_site()
use_spell_check(vignettes = TRUE, lang = "en-US", error = FALSE)
check()
document()
install.packages("roxygen2")
library(roxygen2)
document()
library(devtools)
library(usethis)
library(pkgdown)
library(devtools)
document()
check()
spelling::update_wordlist()
check()
load_all()
use_logo("D:/trustmebro logo/logo blau #FADBD8.png")
use_git(message = "Initial commit")
use_git(message = "Initial commit")
use_github(private = FALSE)
usethis::use_git(message = "Initial commit")
usethis::use_git(message = "Initial commit")
usethis::use_github(private = FALSE)
usethis::use_github_action("pkgdown")
usethis::use_pkgdown_github_pages()
check()
load_all()
load_all()
check()
document()
check()
check()
check()
document()
check()
