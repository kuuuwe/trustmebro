# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT 2701", "SAM10",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210"),
school = c(54321, 22345, 22345, 22345, 65432,
12345, 12345, "unkown", 12345,
22345, 65432))
# call function
df_modified <- df %>% exclude_cases(no_dupes = "sgic", no_na = "school")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("exclude_cases correctly removes duplicate sgics", {
#data
df <- sailor_students %>% select(sgic, school)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT 2701", "SAM10",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210"))
# call function
df_modified <- df %>% exclude_cases(no_dupes = "sgic")
# test equal
expect_equal(df_modified, expected_df)
})
t
#common cases
test_that("exclude_cases correctly removes duplicate sgics", {
#data
df <- sailor_students %>% select(sgic, school)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT 2701", "SAM10",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210"))
# call function
df_modified <- df %>% exclude_cases(no_dupes = "sgic")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("exclude_cases correctly removes duplicate sgics", {
#data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT 2701", "SAM10",
"      UIT3006 ", "@@@@@@", NA, " ", "MOA2210"))
# call function
df_modified <- df %>% exclude_cases(no_dupes = "sgic")
# test equal
expect_equal(df_modified, expected_df)
})
check8
load_all()
document()
document()
check()
use_vignette("inspect SGICs")
use_vignette("inspect_sgics")
check()
pkgdown::build_site()
load_all()
builod_site()
build_site()
load_all()
build_site()
codument()
load_all()
document()
unload()
build_site()
.Last.error
document()
build_site()
document()
load_all()
build_site
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
load_all()
test_that("report_invalid_birthdaymonth actually extracts all SGICs with invalid birthdates", {
# simulate testdata
data <- tibble(
code = c("ALE1606", "BFG0112", "DFG1045")
)
# apply function
invalid_birthdaymonths <- report_invalid_birthdaymonth(data, "code", 4, 7)
# test number of rows
expect_equal(nrow(invalid_birthdaymonths), 1)
})
load_all()
load_all
load_all()
test_that("report_invalid_birthdaymonth actually extracts all SGICs with invalid birthdates", {
# simulate testdata
data <- tibble(
code = c("ALE1606", "BFG0112", "DFG1045")
)
# apply function
invalid_birthdaymonths <- report_invalid_birthdaymonth(data, "code")
# test number of rows
expect_equal(nrow(invalid_birthdaymonths), 1)
})
document()
load_all()
test_that("report_invalid_birthdaymonth actually extracts all SGICs with invalid birthdates", {
# simulate testdata
data <- tibble(
code = c("ALE1606", "BFG0112", "DFG1045")
)
# apply function
invalid_birthdaymonths <- report_invalid_birthdaymonth(data, "code")
# test number of rows
expect_equal(nrow(invalid_birthdaymonths), 1)
})
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612", 4, 7), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102", 4, 7), FALSE)
expect_error(inspect_birthdaymonth("AAA0101", 7, 2))
expect_error(inspect_birthdaymonth(345, 1, 7))
})
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_error(inspect_birthdaymonth("AAA0101"))
expect_error(inspect_birthdaymonth(345))
})
document()
load_all()
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_error(inspect_birthdaymonth("AAA0101"))
expect_error(inspect_birthdaymonth(345))
})
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_error(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_error(inspect_birthdaymonth(345))
})
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_error(inspect_birthdaymonth(345))
})
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_error(inspect_birthdaymonth(345))
})
document()
check()
document()
check()
document()
build_site()
document()
load_all()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), FALSE)
expect_error(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_error(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
document()
load_all()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_error(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
document()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_error(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
document()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_error(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_equal(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
document()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_equal(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
document()
test_that("inspect_birthday detects if birthday is correctly provided", {
expect_equal(inspect_birthday("KNE12"), TRUE)
expect_equal(inspect_birthday("ALS67"), FALSE)
expect_equal(inspect_birthday("02DFGTR"), TRUE)
expect_equal(inspect_birthday("356AA0101"), FALSE)
expect_error(inspect_birthday(345))
})
test_that("report_invalid_birthday actually extracts all SGICs with invalid birthdays", {
# simulate testdata
data <- tibble(
code = c("ALE16", "BFG45", "DFG30")
)
# apply function
invalid_birthdays <- report_invalid_birthday(data, "code")
# test number of rows
expect_equal(nrow(invalid_birthdays), 1)
})
test_that("report_invalid_birthday actually extracts all SGICs with invalid birthdays", {
# simulate testdata
data <- tibble(
code = c("ALE16", "BFG45", "DFG30", "03FLG02")
)
# apply function
invalid_birthdays <- report_invalid_birthday(data, "code")
# test number of rows
expect_equal(nrow(invalid_birthdays), 1)
})
test_that("report_invalid_birthday actually extracts all SGICs with invalid birthdays", {
# simulate testdata
data <- tibble(
code = c("ALE16", "BFG45", "DFG30", "03FLG02")
)
# apply function
invalid_birthdays <- report_invalid_birthday(data, "code")
# test number of rows
expect_equal(nrow(invalid_birthdays), 2)
})
check()
document()
test_that("inspect_birthmonth detects if birthmonth is correctly provided", {
expect_equal(inspect_birthmonth("KNE12"), TRUE)
expect_equal(inspect_birthmonth("ALS33"), FALSE)
expect_equal(inspect_birthmonth("08DGT"), TRUE)
expect_error(inspect_birthmonth(345))
})
check()
document()
check()
document()
check()
document()
check()
test <- sailor_students
View(test)
View(test)
sailor_students <- sailor_students %>% inspect_codestructure(sgic, "^[A-Za-z]{3}[0-9]{4}$")
View(test)
sailor_students <- sailor_students %>% mutate(pattern_match = inspect_codestructure(code, pattern = "\\d{4}"))
sailor_students <- sailor_students %>% mutate(pattern_match = inspect_codestructure(sgic, pattern = "\\d{4}"))
View(sailor_students)
rm(sailor_students)
test <- test %>% mutate(inspect_codestructure(sgic, pattern = "^[A-Za-z]{3}[0-9]{4}$"))
View(test)
test <- test %>% mutate(inspect_codestructure(sgic, pattern = "^[A-Za-z]{3}[0-9]{4}$"))
test <- test %>% mutate(structure_check = inspect_codestructure(sgic, pattern = "^[A-Za-z]{3}[0-9]{4}$"))
test <- test %>% mutate(structure_check = inspect_codestructure(sgic, pattern = "^[A-Za-z]{3}[0-9]{4}$"),
birthdate_check = inspect_birthdaymonth(sgic))
View(test)
test <- sailor_students
test <- test %>% mutate(structure_check = inspect_codestructure(sgic, pattern = "^[A-Za-z]{3}[0-9]{4}$"),
birthdate_check = inspect_birthdaymonth(sgic))
document()
build_site()
document()
unload()
build_site()
-last_error()
.last.error()
.Last.error()
document()
check()
document()
check()
build_site()
document()
build_site()
document()
check()
build_site()
document()
check()
build_site()
View(test)
test2 <- report_dupes(test, school, class, sgic, gender)
View(test2)
document()
build_site()
check()
View(test)
test <- test %>%
mutate(schoolnumber = as.numeric(schoolnumber))
test <- test %>%
mutate(school = as.numeric(school))
View(test)
test3 <- report_invalid_schoolnumber(sailor_students, as.numeric(school), 5)
test3 <- report_invalid_schoolnumber(sailor_students, as.numeric(sailor_students$school), 5)
View(test)
test3 <- report_invalid_schoolnumber(sailor_students, school, 5)
View(test)
test3 <- report_invalid_schoolnumber(test, school, 5)
test3 <- report_invalid_schoolnumber(test, as.numeric("school"), 5)
test3 <- report_invalid_schoolnumber(test, "school", 5)
View(test3)
document()
check()
build_site()
test4 y- sailor_keys
test4 <- sailor_keys
View(test4)
View(test2)
check()
check()
build_site()
check()
build_site()
build_site()
build_site()
codument()
document()
load_all()
unload()
build_site()
build_site()
document()
use_vignette(get_data_matchready)
use_vignette("get_data_matchready")
View(test4)
document()
check()
check()
check()
build_site()
.Last.error
document()
build_site()
check()
check()
build_site()
build_site()
build_site()
build_site()
.Last.error
build_site()
use_r("exclude_cases")
check()
devtools::build()
library(devtools)
build()
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
document()
load()
load_all()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC##0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- sailor_students %>% select(testscore_langauge)
# expected result
expected_df <- tibble(
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA))
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df canbe used with pipe operator", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# expect equal
expect_equal(df_modified, expected_df)
})
library(devtools)
check()
build()
library(devtools)
library(usethis)
library(gitcreds)
check()
library(devtools)
library(usethis)
library(pkgdown)
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
check()
document()
document()
build_site()
document()
build_site()
document()
build_site()
document()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
check()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
library(devtools)
build()
