age = c(25, 30, 25, 40, 25)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c(TRUE, FALSE, TRUE, FALSE, TRUE))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
document()
document()
#common cases
test_that("inspect_dupes correctly identifies duplicate cases", {
# data
data <- tibble::tibble(
id = 1:5,
name = c("Alice", "Bob", "Alice", "David", "Alice"),
age = c(25, 30, 25, 40, 25)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c(TRUE, FALSE, TRUE, FALSE, TRUE))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
test_that("inspect_dupes handles no duplicates correctly", {
# data
data <- tibble::tibble(
id = 1:4,
name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = FALSE)
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge caees
test_that("inspect_dupes handles empty data frame", {
# data empty
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = logical(0))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
document()
document()
unload()
build_site()
use_r("report_dupes")
document()
document()
data <- tibble::tibble(
id = 1:6,
name = c("Alice", "Bob", "Alice", "David", "Alice", "Bob"),
age = c(25, 30, 25, 40, 25, 30)
)
# Inspect duplicates basierend auf 'name' und 'age'
inspected_data <- inspect_dupes(data, name, age)
# Report duplicates und nur die Fälle zurückgeben, wo 'has_dupes' TRUE ist
duplicates <- report_dupes(data, name, age)
View(data)
View(duplicates)
View(inspected_data)
document()
data <- tibble::tibble(
id = 1:6,
name = c("Alice", "Bob", "Alice", "David", "Alice", "Bob"),
age = c(25, 30, 25, 40, 25, 30)
)
# Inspect duplicates basierend auf 'name' und 'age'
inspected_data <- inspect_dupes(data, name, age)
# Report duplicates und nur die Fälle zurückgeben, wo 'has_dupes' TRUE ist
duplicates <- report_dupes(data, name, age)
View(data)
View(duplicates)
View(inspected_data)
use_test()
use_test()
test_that("inspect_dupes correctly identifies duplicates", {
# data
data <- tibble::tibble(
id = 1:6,
name = c("Alice", "Bob", "Alice", "David", "Alice", "Bob"),
age = c(25, 30, 25, 40, 25, 30)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
test_that("inspect_dupes correctly identifies duplicates", {
# data
data <- tibble::tibble(
id = 1:6,
name = c("Alice", "Bob", "Alice", "David", "Alice", "Bob"),
age = c(25, 30, 25, 40, 25, 30)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
test_that("inspect_dupes handles no duplicates correctly", {
# data
data <- tibble::tibble(
id = 1:4,
name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40)
)
# expected restuls
expected_result <- data
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
test_that("inspect_dupes handles no duplicates correctly", {
# data
data <- tibble::tibble(
id = 1:4,
name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40)
)
# expected restuls
expected_result <- data %>%
mutate(has_dupes = c(FALSE, FALSE, FALSE, FALSE))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c())
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c( ))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = logical(0))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
document()
unload()
build_stie()
build_site()
load(a--())
load_all()
check()
document()
check()
use_r("clean_strings_for_matching")
document()
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
View(df)
document()
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
df <- tibble::tibble(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
print(df_modified)
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# Anwenden der Funktion auf den DataFrame
df_modified <- replace_nonalnum_in_df(df, "#")
document()
View(data)
View(duplicates)
View(inspected_data)
View(df)
test <- replace_nonalnum_in_df(df)
View(test)
use_test()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs##t#t",
"Thisonehasümläutsandspec#alchär#cters",
"Anothersentencewith####special#charactersandnonumbers"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs##t#t",
"Thisonehasümläutsandspec#alchär#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasümläutsandspec#alchär#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- data.frame(
age = c(25, 30, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello*Thisisäteststringwithnumberslike123andspecialcharacters****Tabs*",
"Thisonehasümläutsandspec*alchär*cters***",
"Anothersentencewith****special*charactersandnonumbers*"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "*")
# expect equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# expect equal
expect_equal(df_modified, expected_df)
})
document()
check()
document()
check()
sprintf("%X", as.integer(charToRaw("Ä")))
library(stringi)
stringi::stri_escape_unicode("Ä")
stringi::stri_escape_unicode("Ö")
stringi::stri_escape_unicode("Ü")
stringi::stri_escape_unicode("ä")
stringi::stri_escape_unicode("ö")
stringi::stri_escape_unicode("ü")
document()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisateststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasumlautsandspec#alchar#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
DOCUMENT8
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisateststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasumlautsandspec#alchar#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- data.frame(
age = c(25, 30, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello*Thisisateststringwithnumberslike123andspecialcharacters****Tabs*",
"Thisonehasumlautsandspec*alchar*cters***",
"Anothersentencewith****special*charactersandnonumbers*"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "*")
# expect equal
expect_equal(df_modified, expected_df)
})
check()
df <- tibble:tibble( name = c(ÄNNÖ))
df <- tibble:tibble( name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+"), grade = c("werf"))
View(df)
df_test <- replace_nonalnum_in_df(df)
View(df_test)
check()
unload()
build_site()
library(devtools)
build_manual()
build()
