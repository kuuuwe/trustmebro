mutate(has_dupes = c())
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = c( ))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
#edge cases
test_that("inspect_dupes handles empty data frame correctly", {
# empty data
data <- tibble::tibble(
id = integer(0),
name = character(0),
age = integer(0)
)
# expected result
expected_result <- data %>%
mutate(has_dupes = logical(0))
# call function
result <- inspect_dupes(data, name, age)
# test equal
expect_equal(result, expected_result)
})
document()
unload()
build_stie()
build_site()
load(a--())
load_all()
check()
document()
check()
use_r("clean_strings_for_matching")
document()
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
View(df)
document()
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
df <- tibble::tibble(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers.")
)
# Apply replace_nonalnum function
df_modified <- replace_nonalnum(df, "#")
print(df_modified)
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# Anwenden der Funktion auf den DataFrame
df_modified <- replace_nonalnum_in_df(df, "#")
document()
View(data)
View(duplicates)
View(inspected_data)
View(df)
test <- replace_nonalnum_in_df(df)
View(test)
use_test()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs: \t \t",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs##t#t",
"Thisonehasümläutsandspec#alchär#cters",
"Anothersentencewith####special#charactersandnonumbers"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs##t#t",
"Thisonehasümläutsandspec#alchär#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisäteststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasümläutsandspec#alchär#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- data.frame(
age = c(25, 30, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is ä test string with numbers like 123 and special characters #$%.   Tabs:",
"This one has ümläuts and spec!al chär$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello*Thisisäteststringwithnumberslike123andspecialcharacters****Tabs*",
"Thisonehasümläutsandspec*alchär*cters***",
"Anothersentencewith****special*charactersandnonumbers*"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "*")
# expect equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# expect equal
expect_equal(df_modified, expected_df)
})
document()
check()
document()
check()
sprintf("%X", as.integer(charToRaw("Ä")))
library(stringi)
stringi::stri_escape_unicode("Ä")
stringi::stri_escape_unicode("Ö")
stringi::stri_escape_unicode("Ü")
stringi::stri_escape_unicode("ä")
stringi::stri_escape_unicode("ö")
stringi::stri_escape_unicode("ü")
document()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisateststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasumlautsandspec#alchar#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
DOCUMENT8
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:         ",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello#Thisisateststringwithnumberslike123andspecialcharacters####Tabs#",
"Thisonehasumlautsandspec#alchar#cters###",
"Anothersentencewith####special#charactersandnonumbers#"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- data.frame(
age = c(25, 30, 35),
height = c(170, 180, 175)
)
# expected result
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello! This is a test string with numbers like 123 and special characters #$%.   Tabs:",
"This one has umlauts and spec!al char$cters...",
"Another sentence with @#$% special! characters and no numbers."),
stringsAsFactors = FALSE
)
# expected result
expected_df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
description = c("Hello*Thisisateststringwithnumberslike123andspecialcharacters****Tabs*",
"Thisonehasumlautsandspec*alchar*cters***",
"Anothersentencewith****special*charactersandnonumbers*"),
stringsAsFactors = FALSE
)
# call function
df_modified <- replace_nonalnum_in_df(df, "*")
# expect equal
expect_equal(df_modified, expected_df)
})
check()
df <- tibble:tibble( name = c(ÄNNÖ))
df <- tibble:tibble( name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+"))
df <- tibble:tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+") grade = c("werf"))
df <- tibble::tibble(name = c("ÄNNÖ  12.+"), grade = c("werf"))
View(df)
df_test <- replace_nonalnum_in_df(df)
View(df_test)
check()
unload()
build_site()
library(devtools)
build_manual()
build()
library(devtools)
library(roxygen2)
library(testthat)
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
#edge cases
test_that("report_invalid_sex handles an empty data frame", {
# data
data <- tibble::tibble(
sex = character(0)
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = character(0)
)
# call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
test_that("report_invalid_sex handles an empty recode map", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c()
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# call fucntion
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
load_all()
#common case
test_that("report_invalid_sex identifies invalid sex values correctly", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("other", "unknown", "FEMALE")
)
#call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
#edge cases
test_that("report_invalid_sex handles an empty data frame", {
# data
data <- tibble::tibble(
sex = character(0)
)
# recode map
recode_map <- c(male = "M", female = "F")
# testergebnis
expected_invalid <- tibble::tibble(
sex = character(0)
)
# call function to test
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
test_that("report_invalid_sex handles an empty recode map", {
# data
data <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# recode map
recode_map <- c()
# testergebnis
expected_invalid <- tibble::tibble(
sex = c("male", "female", "other", "unknown", "FEMALE")
)
# call fucntion
invalid_sex <- report_invalid_sex(data, "sex", recode_map)
# test equal
expect_equal(invalid_sex, expected_invalid)
})
unload()
check()
load_all()
unload()
check()
load()
load_all()
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_error(inspect_birthmonth("AAA0101", 5))
})
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_equal(inspect_schoolnumber("AAA0101", FALSE))
})
expect_equal(inspect_schoolnumber("AAA0101", 4, FALSE))
expect_equal(inspect_schoolnumber("AAA0101", 4), FALSE)
test_that("inspect_schoolnumber detects if schoolnumber has the expected length", {
expect_equal(inspect_schoolnumber(12345, 5), TRUE)
expect_equal(inspect_schoolnumber(123, 5), FALSE)
expect_equal(inspect_schoolnumber("AAA0101", 4), FALSE)
})
test_that("report_invalid_schoolnumber actually extracts all invalid schoolnumbers", {
# simulate testdata
data <- tibble(
schoolnumber = c(12345, 54321, 123)
)
# apply function
invalid_schoolnumbers <- report_invalid_schoolnumber(data, "schoolnumber", 5)
# test number of rows
expect_equal(nrow(invalid_schoolnumbers), 1)
})
unload()
check()
