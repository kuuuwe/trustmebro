document()
build_site()
document()
build_site()
document()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
check()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
document()
build_site()
library(devtools)
build()
library(usethis)
library(devtools)
library(pkgdown)
library(roxygen2)
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
check()
expect_equal(inspect_birthdaymonth("3103", format = "DDMM", TRUE))
library(testthat)
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_equal(inspect_birthdaymonth("3103", format = "DDMM", TRUE))
expect_error(inspect_birthdaymonth(345))
})
expect_equal(inspect_birthdaymonth("3103", format = "DDMM"), TRUE)
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_equal(inspect_birthdaymonth("3103", format = "DDMM"), TRUE)
expect_error(inspect_birthdaymonth(345))
})
expect_equal(inspect_birthdaymonth("3103", format = "DDMM"), TRUE)
expect_equal(inspect_birthdaymonth("ADF3103", format = "DDMM"), TRUE)
load8
load()
devtools::load_all()
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_equal(inspect_birthdaymonth("ADF3103", format = "DDMM"), TRUE)
expect_error(inspect_birthdaymonth(345))
})
expect_equal(inspect_birthdaymonth("31ADF03", format = "DDMM"), FALSE)
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_equal(inspect_birthdaymonth("ADF3103", format = "DDMM"), TRUE)
expect_equal(inspect_birthdaymonth("31ADF03", format = "DDMM"), FALSE)
expect_error(inspect_birthdaymonth(345))
})
expect_error(inspect_birthdaymonth("2108", format = "yyddmm"))
test_that("inspect_birthdaymonth detects if birthday and birthmonth are correctly provided", {
expect_equal(inspect_birthdaymonth("KNE1612"), TRUE)
expect_equal(inspect_birthdaymonth("ALS3102"), FALSE)
expect_equal(inspect_birthdaymonth("5AAA0101"), FALSE)
expect_equal(inspect_birthdaymonth("3103AAA"), TRUE)
expect_equal(inspect_birthdaymonth("ADF3103", format = "DDMM"), TRUE)
expect_equal(inspect_birthdaymonth("31ADF03", format = "DDMM"), FALSE)
expect_error(inspect_birthdaymonth("2108", format = "yyddmm"))
expect_error(inspect_birthdaymonth(345))
})
check()
document()
check()
document()
check()
print(sailor_students)
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC##0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# expect equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df canbe used with pipe operator", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
document()
load_all()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC##0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- sailor_students %>% select(testscore_langauge)
# expected result
expected_df <- tibble(
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA))
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df canbe used with pipe operator", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# expect equal
expect_equal(df_modified, expected_df)
})
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "[_]")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "[\\_]")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "_")
# test equal
expect_equal(df_modified, expected_df)
})
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "_@")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "_@")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df can handle kepp-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "Ä_@")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df canbe used with pipe operator", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
document()
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC##0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
#common cases
test_that("replace_nonalnum_in_df removes spaces and replaces non-alphanumeric characters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC##0308", "H#T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "######", "#", "#", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df handles no character columns correctly", {
# data
df <- sailor_students %>% select(testscore_langauge)
# expected result
expected_df <- tibble(
testscore_langauge = c(425, 4596, 2456, 2345, 1234,
123, 56, 986, 284, 105,
9586, NA))
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "H$T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
test_that("replace_nonalnum_in_df allows custom replacement character", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "H$T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- replace_nonalnum_in_df(df, sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df canbe used with pipe operator", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC$$0308", "H$T2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "$$$$$$", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$")
# test equal
expect_equal(df_modified, expected_df)
})
test_that("replace_nonalnum_in_df can handle keep-parameters", {
# data
df <- sailor_students %>% select(sgic)
# expected result
expected_df <- tibble(
sgic = c("MUC__0308", "HÄT2701", "MUK3801", "SAM10", "T0601",
"UIT3006", "@@@@@@", "$", "$", "MOA2210",
"MUK3801", "T0601"))
# call function
df_modified <- df %>% replace_nonalnum_in_df(sgic, replacement = "$", keep = "Ä_@")
# test equal
expect_equal(df_modified, expected_df)
})
#edge cases
test_that("replace_nonalnum_in_df handles empty data frame correctly", {
# data empty
df <- data.frame(
name = character(0),
description = character(0),
stringsAsFactors = FALSE
)
# expected df
expected_df <- df
# call function
df_modified <- replace_nonalnum_in_df(df, replacement = "#")
# expect equal
expect_equal(df_modified, expected_df)
})
check()
document()
check()
document()
check()
document()
check()
check()
check()
check()
check()
check()
build_site()
document()
build_site()
unload()
build_site()
use_github_action()
use_github_action()
use_github_action()
document()
check()
use_mit_license()
check()
unload()
build_site()
document()
check()
unload()
build_site()
document()
document()
unload()
build_site()
document()
unload()
build_site()
document()
unload()
build_site()
document()
onload()
unload()
buuild_site()
build_site()
document()
build_home()
library(devtools)
library(usethis)
library(roxygen2)
library(pkgdown)
document()
unload()
build_site()
build_site()
document()
unload()
build_site()
document()
unload()
build_site()
document()
unload()
build_site()
document()
unload()
build_site()
document()
unload()
build_:site()
build_site()
library(devtools)
build()
